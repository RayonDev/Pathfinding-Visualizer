{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","row","isFinish","isStart","isWall","id","className","Component","PathfindingVisualizer","state","nodes","righe","rigaCorrente","colonne","push","setState","map","riga","rigaIndex","nodo","nodoIndice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGqBA,G,6KACN,IAAD,EAOFC,KAAKC,MALLC,EAFE,EAEFA,IACAC,EAHE,EAGFA,IAHE,EAIFC,SAJE,EAKFC,QALE,EAMFC,OAGJ,OACI,qBACAC,GAAE,eAAUJ,EAAV,YAAiBD,GACnBM,UAAS,a,GAbaC,cCCbC,G,wDACjB,WAAYT,GAAQ,IAAD,8BACf,cAAMA,IACDU,MAAQ,CACXC,MAAO,IAHM,E,gEAUjB,IADA,IAAMA,EAAQ,GACNC,EAAQ,EAAGA,EAAQ,GAAIA,IAAS,CAEtC,IADA,IAAMC,EAAe,GACbC,EAAU,EAAGA,EAAU,GAAIA,IAEjCD,EAAaE,KAAK,IAEpBJ,EAAMI,KAAKF,GAEbd,KAAKiB,SAAS,CAACL,Y,+BAGP,IACDA,EAASZ,KAAKW,MAAdC,MAEP,OACE,qBAAKJ,UAAU,UAAf,SACGI,EAAMM,KAAI,SAACC,EAAMC,GAChB,OAAO,8BACJD,EAAKD,KAAI,SAACG,EAAMC,GAAP,OAAsB,cAAC,EAAD,kB,GA7BKb,cCQpCc,MARf,WACE,OACE,qBAAKf,UAAU,MAAf,SACE,cAAC,EAAD,OCKSgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.67b3f40e.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Node.css';\n\nexport default class Node extends Component {\n    render () {\n        const {\n            col,\n            row,\n            isFinish,\n            isStart,\n            isWall,\n        } = this.props;\n\n        return (\n            <div \n            id={`node-${row}-${col}`}\n            className={`node`}>\n            </div>\n        );\n    }\n\n    \n    \n\n    \n}","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport './PathfindingVisualizer.css';\n\nexport default class PathfindingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          nodes: []\n        };\n    }\n\n    // Funzione che viene chiamata all'inizializzazione del component\n    componentDidMount() {\n      const nodes = [];\n      for(let righe = 0; righe < 15; righe++) {\n        const rigaCorrente = [];\n        for(let colonne = 0; colonne < 50; colonne++) {\n          // Creo una matrice\n          rigaCorrente.push([]);\n        }\n        nodes.push(rigaCorrente);\n      }\n      this.setState({nodes});\n    }\n\n    render() {\n      const {nodes} = this.state;\n\n      return(\n        <div className=\"griglia\">\n          {nodes.map((riga, rigaIndex) => {\n            return <div>\n              {riga.map((nodo, nodoIndice) => <Node></Node>)}\n              </div>\n          })}\n        </div>\n      )\n        \n    }\n}","//import logo from './logo.svg';\nimport './App.css';\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer.jsx\";\n\nfunction App() {\n  return(\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}